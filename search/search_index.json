{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python 2NMS config manager \u00b6 Python package to manage application configurations. This is a wrapper around the OmegaConf create function. This package makes it easy to define parameters for your application. It's possible to define parameters in different ways (in order of precedence): programmatically defined default values environment variables/dotenv files configuration files in YAML format cli arguments Documentation \u00b6 Check out the Github Docs Features \u00b6 generates an OmegaConf dictionary object supports environment variables supports dotenv reads yaml config files supports cli parameters allows programmatic initialization of parameters Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#python-2nms-config-manager","text":"Python package to manage application configurations. This is a wrapper around the OmegaConf create function. This package makes it easy to define parameters for your application. It's possible to define parameters in different ways (in order of precedence): programmatically defined default values environment variables/dotenv files configuration files in YAML format cli arguments","title":"Python 2NMS config manager"},{"location":"#documentation","text":"Check out the Github Docs","title":"Documentation"},{"location":"#features","text":"generates an OmegaConf dictionary object supports environment variables supports dotenv reads yaml config files supports cli parameters allows programmatic initialization of parameters","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"\u00b6 Top-level package for Python 2NMS config manager. config special \u00b6 config \u00b6 twonms.config module to manage application configuration The module uses OmegaConf to combine and read configuration items. Configuration parameters can be provided in different ways and will be processessed in a certain order where each step may override the parameters of the previous step. In the end all parameters of all steps will be combined and accessible in the Configure() class no parameters provided - use application default parameters if configured (via REQUIRED_CONFIG_PARAMETERS parameter) from envvars (system env vars or .env file) from *.yml config files from cli Typical usage example: from twonms.config import Config config = Config.create() debug = config.debug my_other_param = config.my_other_param Config \u00b6 Main class of the module Manages application configuration parameters and this actually overrides from OmegaConf so the same rules apply, check the OmegaConf docs for more details. This class implements some default inheritance to take parameters from different sources (envvars, cli, conf files) Attributes: Name Type Description likes_spam A boolean indicating if we like SPAM or not. eggs An integer count of the eggs we have laid. cli_config: OmegaConf property readonly \u00b6 Property for the CLI variables config Returns the OmegaConf object conf property readonly \u00b6 Property to return the yaml config filename If the config file is defined then return it Otherwise check if the file for the environment exists If not then return None env property readonly \u00b6 Property for the environment variable Returns either a predefined environment (DEV, PROD, DEBUG, TEST) or None environment_config: OmegaConf property readonly \u00b6 Property for the environment variables config Returns the OmegaConf object file_config: OmegaConf property readonly \u00b6 Property that returs the OmegaConf based on the yaml configuration file path property readonly \u00b6 Property for path variable Returns the path if the folder exists, otherwise returns None required_config: OmegaConf property readonly \u00b6 Property for the required config Returns the OmegaConf create ( path = './conf' , conf = None , env = 'PROD' , required_config = {}, allowed_envvars = [ 'environment' , 'debug' ]) staticmethod \u00b6 Creates the Config object This method should be used as the constructor Attributes: Name Type Description path (optional) the path name where yaml config files can be found, default=./conf conf (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars (optional) a list of allowed environment variables that can be loaded via system env vars required_config (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format Example usage: REQUIRED_CONFIG_PARAMETERS = \"\"\" environment: PRODUCTION debug: false \"\"\" Config.create() creates a Config object with default settings, if \"./conf/production.yaml\" exists then this will be loaded Config.create(path=\"./configs\", conf=\"myconfig.yaml\", ) creates a Config object and load \"./configs/myconfig.yaml\" Config.create(path=\"./configs\", env=\"DEV\", ) creates a Config object and load \"./configs/development.yaml\" Config.create(required_config=REQUIRED_CONFIG_PARAMETERS, ) creates a Config object loads a set of predefined required config parameters Source code in twonms/config/config.py @staticmethod def create ( path : str = \"./conf\" , conf : str = None , env : str = \"PROD\" , required_config : Union [ str , dict ] = {}, allowed_envvars = DEFAULT_ALLOWED_ENVVARS , ) -> OmegaConf : \"\"\"Creates the Config object This method should be used as the constructor Attributes: path: (optional) the path name where yaml config files can be found, default=./conf conf: (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env: (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars: (optional) a list of allowed environment variables that can be loaded via system env vars required_config: (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format Example usage: REQUIRED_CONFIG_PARAMETERS = \\\"\\\"\\\" environment: PRODUCTION debug: false \\\"\\\"\\\" Config.create() creates a Config object with default settings, if \"./conf/production.yaml\" exists then this will be loaded Config.create(path=\"./configs\", conf=\"myconfig.yaml\", ) creates a Config object and load \"./configs/myconfig.yaml\" Config.create(path=\"./configs\", env=\"DEV\", ) creates a Config object and load \"./configs/development.yaml\" Config.create(required_config=REQUIRED_CONFIG_PARAMETERS, ) creates a Config object loads a set of predefined required config parameters \"\"\" obj = Config ( path , conf , env , required_config , allowed_envvars ) conf = obj . __create () return conf","title":"api"},{"location":"api/#twonms","text":"Top-level package for Python 2NMS config manager.","title":"twonms"},{"location":"api/#twonms.config","text":"","title":"config"},{"location":"api/#twonms.config.config","text":"twonms.config module to manage application configuration The module uses OmegaConf to combine and read configuration items. Configuration parameters can be provided in different ways and will be processessed in a certain order where each step may override the parameters of the previous step. In the end all parameters of all steps will be combined and accessible in the Configure() class no parameters provided - use application default parameters if configured (via REQUIRED_CONFIG_PARAMETERS parameter) from envvars (system env vars or .env file) from *.yml config files from cli Typical usage example: from twonms.config import Config config = Config.create() debug = config.debug my_other_param = config.my_other_param","title":"config"},{"location":"api/#twonms.config.config.Config","text":"Main class of the module Manages application configuration parameters and this actually overrides from OmegaConf so the same rules apply, check the OmegaConf docs for more details. This class implements some default inheritance to take parameters from different sources (envvars, cli, conf files) Attributes: Name Type Description likes_spam A boolean indicating if we like SPAM or not. eggs An integer count of the eggs we have laid.","title":"Config"},{"location":"api/#twonms.config.config.Config.cli_config","text":"Property for the CLI variables config Returns the OmegaConf object","title":"cli_config"},{"location":"api/#twonms.config.config.Config.conf","text":"Property to return the yaml config filename If the config file is defined then return it Otherwise check if the file for the environment exists If not then return None","title":"conf"},{"location":"api/#twonms.config.config.Config.env","text":"Property for the environment variable Returns either a predefined environment (DEV, PROD, DEBUG, TEST) or None","title":"env"},{"location":"api/#twonms.config.config.Config.environment_config","text":"Property for the environment variables config Returns the OmegaConf object","title":"environment_config"},{"location":"api/#twonms.config.config.Config.file_config","text":"Property that returs the OmegaConf based on the yaml configuration file","title":"file_config"},{"location":"api/#twonms.config.config.Config.path","text":"Property for path variable Returns the path if the folder exists, otherwise returns None","title":"path"},{"location":"api/#twonms.config.config.Config.required_config","text":"Property for the required config Returns the OmegaConf","title":"required_config"},{"location":"api/#twonms.config.config.Config.create","text":"Creates the Config object This method should be used as the constructor Attributes: Name Type Description path (optional) the path name where yaml config files can be found, default=./conf conf (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars (optional) a list of allowed environment variables that can be loaded via system env vars required_config (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format Example usage: REQUIRED_CONFIG_PARAMETERS = \"\"\" environment: PRODUCTION debug: false \"\"\" Config.create() creates a Config object with default settings, if \"./conf/production.yaml\" exists then this will be loaded Config.create(path=\"./configs\", conf=\"myconfig.yaml\", ) creates a Config object and load \"./configs/myconfig.yaml\" Config.create(path=\"./configs\", env=\"DEV\", ) creates a Config object and load \"./configs/development.yaml\" Config.create(required_config=REQUIRED_CONFIG_PARAMETERS, ) creates a Config object loads a set of predefined required config parameters Source code in twonms/config/config.py @staticmethod def create ( path : str = \"./conf\" , conf : str = None , env : str = \"PROD\" , required_config : Union [ str , dict ] = {}, allowed_envvars = DEFAULT_ALLOWED_ENVVARS , ) -> OmegaConf : \"\"\"Creates the Config object This method should be used as the constructor Attributes: path: (optional) the path name where yaml config files can be found, default=./conf conf: (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env: (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars: (optional) a list of allowed environment variables that can be loaded via system env vars required_config: (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format Example usage: REQUIRED_CONFIG_PARAMETERS = \\\"\\\"\\\" environment: PRODUCTION debug: false \\\"\\\"\\\" Config.create() creates a Config object with default settings, if \"./conf/production.yaml\" exists then this will be loaded Config.create(path=\"./configs\", conf=\"myconfig.yaml\", ) creates a Config object and load \"./configs/myconfig.yaml\" Config.create(path=\"./configs\", env=\"DEV\", ) creates a Config object and load \"./configs/development.yaml\" Config.create(required_config=REQUIRED_CONFIG_PARAMETERS, ) creates a Config object loads a set of predefined required config parameters \"\"\" obj = Config ( path , conf , env , required_config , allowed_envvars ) conf = obj . __create () return conf","title":"create()"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Maarten Wallraf mwallraf@2nms.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Maarten Wallraf mwallraf@2nms.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/mwallraf/python_twonms_config/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Python 2NMS config manager could always use more documentation, whether as part of the official Python 2NMS config manager docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/mwallraf/python_twonms_config/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up python_twonms_config for local development. Fork the python_twonms_config repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/python_twonms_config.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/mwallraf/python_twonms_config/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_python_twonms_config ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/mwallraf/python_twonms_config/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Python 2NMS config manager could always use more documentation, whether as part of the official Python 2NMS config manager docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/mwallraf/python_twonms_config/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up python_twonms_config for local development. Fork the python_twonms_config repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/python_twonms_config.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/mwallraf/python_twonms_config/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_python_twonms_config ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.1 (2022-03-17) \u00b6 update docs 0.1.0 (2022-03-12) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#011-2022-03-17","text":"update docs","title":"0.1.1 (2022-03-17)"},{"location":"history/#010-2022-03-12","text":"First release on PyPI.","title":"0.1.0 (2022-03-12)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Python 2NMS config manager, run this command in your terminal: 1 $ pip install python_twonms_config This is the preferred method to install Python 2NMS config manager, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Python 2NMS config manager can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/mwallraf/python_twonms_config Or download the tarball : 1 $ curl -OJL https://github.com/mwallraf/python_twonms_config/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Python 2NMS config manager, run this command in your terminal: 1 $ pip install python_twonms_config This is the preferred method to install Python 2NMS config manager, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Python 2NMS config manager can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/mwallraf/python_twonms_config Or download the tarball : 1 $ curl -OJL https://github.com/mwallraf/python_twonms_config/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Python 2NMS config manager in a project 1 2 3 4 5 6 7 from twonms.config import Config config = Config . create () print ( config . env ) print ( config ) Config.create() object \u00b6 A configuration object is created by calling the Config.create() method. This actually a wrapper around the OmegaConf.create() method. The method takes the following parameters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 path: (optional) the path name where yaml config files can be found, default=./conf conf: (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env: (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars: (optional) a list of allowed environment variables that can be loaded via system env vars required_config: (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format Defining parameters \u00b6 Parameters can be defined in different ways and in a predefined order. Multiple ways can be used at the same time, for example a yaml config file exists together with environment variables and cli arguments. In the end a single OmegaConf object will be created combining all parameters. Import order: programmatically defined default values environment variables dotenv files configuration files in YAML format cli arguments programatically defined parameters \u00b6 It's easy to define defaults for your application by defining a dictionary or list or yaml string. Check the OmegaConf documentation for more details. 1 2 3 4 5 6 7 8 9 10 from twonms.config import Config DEFAULT_CONFIG = \"\"\" name: maarten debug: true \"\"\" config = Config . create ( required_config = DEFAULT_CONFIG ) print ( config . name ) configuration files defined in yaml format \u00b6 It is possible to store all your application parameters in yaml files. You can specifically refer to a file or you can use the default filenames and then the environment parameter will define which config file will be loaded (if it exists). If no filename is specified and no environment parameter is defined then the filename ./conf/producation.yaml will be loaded automatically if it exists. Default config folder = ./conf Default config filenames and matching environment variable: environment config file PROD production.yaml DEV development.yaml TEST test.yaml DEBUG debug.yaml Example: \u00b6 1 2 3 4 5 --- name : maarten description : production configuration file script : test.py usage : test.py --help Usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from twonms.config import Config # create a config object with default parameters # this will search for the file ./conf/production.yaml config_default = Config . create () print ( config_default . script . usage ) # create a config object by specifying the debug environment # this will search for the file ./conf/debug.yaml config_debug = Config . create ( required_config = { \"env\" : \"DEBUG\" }) print ( config_debug . script . usage ) # create a config object with custom config folder and file config_custom = Config . create ( path = \"./customfolder\" , conf = \"mycustomconfig.yaml\" ) print ( config_custom . name ) environment variables \u00b6 Environment variables can be defined via system environment variables or via .env files which will be loaded automatically if it exists. To prevent all existing environment variables to be loaded into your configuration object, you'll have to specify which variables are allowed by specifying the allowed_envvars parameter in the create() method. Example: \u00b6 1 2 3 4 5 6 7 8 9 10 import os # simulate system environment variable os . environ ( \"name\" , \"maarten) from twonms.config import Config config = Config . create ( allowed_envvars = [ \"name\" ]) print ( config . name ) dotenv variables \u00b6 Similar as with system environment variables you can also define envvars in a .env file, locally to the main script. The difference with system environment variables is that there is no need to define the allowed parameters, all parameters defined in the .env file will be loaded. Example: \u00b6 .env file 1 2 name=maarten DEBUG=true 1 2 3 4 5 from twonms.config import Config config = Config . create () print ( config . name , config . DEBUG ) cli arguments \u00b6 The last method to load parameters is to use cli script arguments. All arguments will be loaded. Example: \u00b6 myscript.py 1 2 3 4 5 from twonms.config import Config config = Config . create () print ( config . env ) 1 2 3 # start the script with extra arguments python myscript.py env=DEBUG","title":"usage"},{"location":"usage/#usage","text":"To use Python 2NMS config manager in a project 1 2 3 4 5 6 7 from twonms.config import Config config = Config . create () print ( config . env ) print ( config )","title":"Usage"},{"location":"usage/#configcreate-object","text":"A configuration object is created by calling the Config.create() method. This actually a wrapper around the OmegaConf.create() method. The method takes the following parameters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 path: (optional) the path name where yaml config files can be found, default=./conf conf: (optional) the filename including extension that should be loaded if blank then the environmont default config file will be loaded if the \"env\" variable is given and the file exists default=None env: (optional) if the application is using the standard config file naming conventions then the env variable can be specified and the correct config file is automatically loaded default=PROD allowed_envvars: (optional) a list of allowed environment variables that can be loaded via system env vars required_config: (optional) dictionary or string with all the required parameters, meaning that these parameters will always be present in the Config object If this is a string then it should be in yaml format","title":"Config.create() object"},{"location":"usage/#defining-parameters","text":"Parameters can be defined in different ways and in a predefined order. Multiple ways can be used at the same time, for example a yaml config file exists together with environment variables and cli arguments. In the end a single OmegaConf object will be created combining all parameters. Import order: programmatically defined default values environment variables dotenv files configuration files in YAML format cli arguments","title":"Defining parameters"},{"location":"usage/#programatically-defined-parameters","text":"It's easy to define defaults for your application by defining a dictionary or list or yaml string. Check the OmegaConf documentation for more details. 1 2 3 4 5 6 7 8 9 10 from twonms.config import Config DEFAULT_CONFIG = \"\"\" name: maarten debug: true \"\"\" config = Config . create ( required_config = DEFAULT_CONFIG ) print ( config . name )","title":"programatically defined parameters"},{"location":"usage/#configuration-files-defined-in-yaml-format","text":"It is possible to store all your application parameters in yaml files. You can specifically refer to a file or you can use the default filenames and then the environment parameter will define which config file will be loaded (if it exists). If no filename is specified and no environment parameter is defined then the filename ./conf/producation.yaml will be loaded automatically if it exists. Default config folder = ./conf Default config filenames and matching environment variable: environment config file PROD production.yaml DEV development.yaml TEST test.yaml DEBUG debug.yaml","title":"configuration files defined in yaml format"},{"location":"usage/#example","text":"1 2 3 4 5 --- name : maarten description : production configuration file script : test.py usage : test.py --help Usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from twonms.config import Config # create a config object with default parameters # this will search for the file ./conf/production.yaml config_default = Config . create () print ( config_default . script . usage ) # create a config object by specifying the debug environment # this will search for the file ./conf/debug.yaml config_debug = Config . create ( required_config = { \"env\" : \"DEBUG\" }) print ( config_debug . script . usage ) # create a config object with custom config folder and file config_custom = Config . create ( path = \"./customfolder\" , conf = \"mycustomconfig.yaml\" ) print ( config_custom . name )","title":"Example:"},{"location":"usage/#environment-variables","text":"Environment variables can be defined via system environment variables or via .env files which will be loaded automatically if it exists. To prevent all existing environment variables to be loaded into your configuration object, you'll have to specify which variables are allowed by specifying the allowed_envvars parameter in the create() method.","title":"environment variables"},{"location":"usage/#example_1","text":"1 2 3 4 5 6 7 8 9 10 import os # simulate system environment variable os . environ ( \"name\" , \"maarten) from twonms.config import Config config = Config . create ( allowed_envvars = [ \"name\" ]) print ( config . name )","title":"Example:"},{"location":"usage/#dotenv-variables","text":"Similar as with system environment variables you can also define envvars in a .env file, locally to the main script. The difference with system environment variables is that there is no need to define the allowed parameters, all parameters defined in the .env file will be loaded.","title":"dotenv variables"},{"location":"usage/#example_2","text":".env file 1 2 name=maarten DEBUG=true 1 2 3 4 5 from twonms.config import Config config = Config . create () print ( config . name , config . DEBUG )","title":"Example:"},{"location":"usage/#cli-arguments","text":"The last method to load parameters is to use cli script arguments. All arguments will be loaded.","title":"cli arguments"},{"location":"usage/#example_3","text":"myscript.py 1 2 3 4 5 from twonms.config import Config config = Config . create () print ( config . env ) 1 2 3 # start the script with extra arguments python myscript.py env=DEBUG","title":"Example:"}]}